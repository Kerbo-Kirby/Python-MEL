
global proc float  Add(float $numbers[])
{
    float $num = 0;
    
    for ( $i = 0; $i<size ($numbers); $i++)
{
        $num += $numbers[$i];
}
    return $num;
    
}


global proc float subtract  (float $numbers[])

{
    float $diff = $numbers[0];
    
    for ( $i = 1; $i<size ($numbers); $i++)
{
        $diff -= $numbers[$i];
}
    return $diff;
    
}


global proc float  multi (float $numbers[])

{
    float $mul = 1;
    
    for ( $i = 0; $i<size ($numbers); $i++)
{
        $mul *= $numbers[$i];
}
    return $mul;
    
}



global proc float  divide (float $numbers[])

{
    float $Div = $numbers[0];
    
    for ( $i = 1; $i<size ($numbers); $i++)
{
        $Div /= $numbers[$i];
}
    return $Div;
    
}

global proc float mean (float $numbers[])
{
    float $me = 0;
    float $mo = 0;
    float $val = 0;
    
    for ( $i = 0; $i < size ($numbers); $i++)
{
        $mo =  `size $numbers`;
        
        $me += $numbers[$i];
        
        $val = $me;
        
        $val /= $mo;
      
      
}
    return $val;    
}

  
global proc float[] mode (float $numbers[])
{
    float $modes[];
    float $myvalues[];
    int $freq[];
    for($i=0; $i<size($numbers); $i++)
    {
    if (floatArrayContains($numbers[$i], $myvalues) == 0)
    {
        $myvalues[size($myvalues)] = $numbers[$i];
        $freq[size($myvalues)] = 1;
    }
    else
    {
        int $index = floatArrayFind($numbers[$i], 0, $myvalues);
        $freq[$index] = $freq[$index] + 1;
    }
    }
    int $maxValue = 0;
    for($i = 0; $i<size($freq); $i++)
    {
        if($freq[$i] > $maxValue)
            {
                $maxValue = $freq[$i];
            }
    }
    while(intArrayFind($maxValue, 0, $freq) != -1)
    {
    int $modeIndex = intArrayFind($maxValue, 0, $freq);
    $modes[size($modes)] = $myvalues[$modeIndex];
    $freq[$modeIndex] = 0;
    }

    return $modes;
}
 mode({1,1,5,5,1});
          
    
 

global proc float power (float $numbers[])
{
    ;
    
    float $mul = $numbers[0];
    
    for ( $i = 0; $i<size ($numbers); $i++)
{
  
        $mul *= $numbers[$i];
        
}
    return $mul;
    
}



global proc float median (float $numbers[])
{
   float $value = 0;


  int $mySize = size($numbers);
   
     $numbers = `sort $numbers`;
           
       
          
           if ($mySize % 2 == 0)
          { 
          int $high = ($mySize / 2);
          
          int $low = $high - 1;
          
          $value = ($numbers[$high] + $numbers[$low]) / 2;
           
         }
           
       
      else
             {
                int $myIndex = ($mySize - 1) /2;
                $value = $numbers[$myIndex];
               
             }
             
     

   return $value;
    

}

  median ({1,3,3,6,8,9});
  
  

global proc float[] calc (string $call, float $operation[])
{
   
    float $answer[];
   
    if($call == "add")
    {
      $answer[0] = Add($operation);
       
     return $answer;
     
    }
    
  if($call == "subtract")
  
    {
      $answer[0] = subtract($operation);
       
     return $answer;
        
    }
    if($call == "multiply")
   
    {
        $answer[0] = multi($operation);
       
     return $answer;
        
    }
    
    if($call == "divide")
   
    {
        
        $answer[0] = divide($operation);
       
     return $answer;
        
    }
    
    if($call == "mean")
   
    {
        
        $answer[0] = mean($operation);
       
     return $answer;
        
    }
    
     if($call == "power")
   
    {
        
        $answer[0] = power ($operation);
       
     return $answer;;
        
    }
    
     if($call == "mode")
   
    {
        $answer = Mode($operation);
        
        return $answer;
    }
    
      if($call == "median")
   
    {
        
        $answer[0] = median ($operation);
       
     return $answer;
        
    }
}



calc("median", {1,1,5,5});